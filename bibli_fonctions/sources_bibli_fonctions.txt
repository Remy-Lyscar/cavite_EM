#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
static const int q=1664713,p=1288;
static int n=1; 
void germe(int g)
{
  if((n=g%q)==0) {printf("Prendre une valeur du germe >=1 et <=%d\n",q-1); exit (0);} /* on met g%q et non g pour ne pas risquer de depasser */ 
}                                                                                 /* la valeur max permise pour un int : 2^31-1 */
double alea()
{
  n=n*p%q;
  return (double)(n-1)/(q-2);
}
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
/* Mise a zero d'un vecteur a n elements */
void zero_v(double *a,int n)
{
  int i;
  for(i=0; i<n; i++) {a[i]=0.;}
}
/* ----------------------------------------------------------- */
/* Mise a zero d'une matrice m,n */
void zero(double **a,int m,int n)
{
  int i,j;
  for(i=0; i<m; i++) {for(j=0; j<n; j++) a[i][j]=0.;}
}
/* ----------------------------------------------------------- */
/* Fonction imprimant une matrice quelconque */ 
void mat_imp(double **x,int l,int c)
{
  int i,j;
  for(i=0; i<l; i++) 
    {
      for(j=0; j<c; j++) printf("%e ",x[i][j]); 
      printf("\n");
    } 
  printf("\n");
}
/* ********************************************************************** */
void mat_prod(double **a,double **b,double **ab,int m,int n,int p)
     /* Fait le produit ab de la matrice a(m,n) par la matrice b(n,p) */
     /* Le resultat est dans ab(m,p) */
{
  int i,j,k;
  for(i=0; i<m; i++) 
    {
      for(k=0; k<p; k++) 
	{
	  ab[i][k]=0.;
	  for(j=0; j<n; j++) ab[i][k]+=a[i][j]*b[j][k];
	}
    }
}
/* ********************************************************************** */
int *ivector(int nl,int nh)
     /* Allocate an int vector with subscript range v[nl...nh] */ 
{
  int *v;
  v=(int *)malloc((size_t)((nh-nl+2)*sizeof(int)));
  if(!v) printf("Allocation failure in ivector()");
  return(v-nl+1);
}
/* ********************************************************************** */
void free_ivector(int *v,int nl,int nh)
     /* Free an int vector allocated with ivector() */ 
{
  free((char *)(v+nl-1));
}
/* ********************************************************************** */
void swap(double *x,double *y)
     /* Echange de deux quantites */
{
  double z;
  z=*x; *x=*y; *y=z;
}
/* *********************************************************************** */
void g_j(double **a,int n,double **b,int m)
     /* Par rapport a Numerical Recipes j'ai diminue de 1 tous les indices de a et b pour passer des matrices */
     /* en argument effectif dont l'indice commence a 0 a leurs matrices dont l'indice commence a 1 */
{
  int *indxc,*indxr,*ipiv;
  int i,icol,irow,j,k,l,ll;
  double big,dum,pivinv; /* temp; */
  indxc=ivector(1,n);
  indxr=ivector(1,n);  
  ipiv=ivector(1,n);
  for(j=1; j<=n; j++) ipiv[j]=0;
  for(i=1; i<=n; i++)
    {
      big=0.0;
      for(j=1; j<=n; j++)
	if(ipiv[j]!=1)
	  for(k=1; k<=n; k++)
	    {
	      if(ipiv[k]==0)
		{
		  if(fabs(a[j-1][k-1])>=big)
		    {
		      big=fabs(a[j-1][k-1]);
		      irow=j;
		      icol=k;
		    }
		}
	      else if(ipiv[k]>1) printf("g_j : matrice singuliere-1");
	    }	   
      ++(ipiv[icol]);
      if(irow!=icol)
	{
	  for(l=1; l<=n; l++) swap(&a[irow-1][l-1],&a[icol-1][l-1]);
	  for(l=1; l<=m; l++) swap(&b[irow-1][l-1],&b[icol-1][l-1]);
	}
      indxr[i]=irow;
      indxc[i]=icol;
      if(a[icol-1][icol-1]==0.0 ) printf("g_j : matrice singuliere-2");
      pivinv=1.0/a[icol-1][icol-1];
      a[icol-1][icol-1]=1.0;
      for(l=1; l<=n; l++) a[icol-1][l-1]*=pivinv;
      for(l=1; l<=m; l++) b[icol-1][l-1]*=pivinv;
      for(ll=1; ll<=n; ll++)
	if(ll!=icol)
	  {
	    dum=a[ll-1][icol-1];
	    a[ll-1][icol-1]=0.0;
	    for(l=1; l<=n; l++) a[ll-1][l-1]-=a[icol-1][l-1]*dum;
	    for(l=1; l<=m; l++) b[ll-1][l-1]-=b[icol-1][l-1]*dum;
	  }
    }
  for(l=n; l>=1; l--)
    {
      if(indxr[l]!=indxc[l]) for(k=1; k<=n; k++) swap(&a[k-1][indxr[l]-1],&a[k-1][indxc[l]-1]);
    }
  free_ivector(ipiv,1,n);
  free_ivector(indxr,1,n);
  free_ivector(indxc,1,n);
}
/* ***************************************************************************** */
/* Egalite de deux matrices colonnes */
void egal(double u[],double up[],int n)
{
  int i;
  for(i=0; i<n; i++) u[i]=up[i];
}
/* ----------------------------------------------------------- */
/* Fait le produit de matrices AB, A matrice m,n, B matrice colonne n */
void pmc(double **a,double *b,double *c,int m,int n)
{
  int i,j; double s;
  for(i=0; i<m; i++)
    { 
      for(s=0.,j=0; j<n; j++) s=s+a[i][j]*b[j]; 
      c[i]=s;
    }
}
/* ----------------------------------------------------------- */
void mat_inv(double **a,double **inv_a,int n)
     /* Calcul l'inverse d'une matrice n,n */
     /* Rappel : g_j(x,n,y,n) renvoit l'inverse du x d'entree dans le x de sortie */
{
  int i,j;
  double **b;
  b=Mat_alloc_double(n,n);
  zero(b,n,n); /* seconds membres bidons */
  for(i=0; i<n; i++) for(j=0; j<n; j++) inv_a[i][j]=a[i][j]; /* sauvegarde de a[][] */
  g_j(inv_a,n,b,n);
}
/* ********************************************************************** */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
/*************************************************************************/
double *D_1(
			 int nligne         /* Nombre d'elements */
			 ){
  double *mat;
  mat=(double*)malloc(nligne*sizeof(double));
  if(mat==NULL){
    fprintf(stderr,"D_1 mat: mémoire insuffisante\n");
    exit(-1);
  }
  return mat;
}
/*************************************************************************/
void f_D_1(
		     double *mat,      /*  Pointeur sur le vecteur */
		     int ligne         /*  Nombre d'elements */
		     ){
  free(mat);
  return;
}
/*************************************************************************/
int *I_1(
		   int nligne          /* Nombre d'elements */
		   ){
  int *mat;
  mat=(int*)malloc(nligne*sizeof(int));
  if(mat==NULL){
    fprintf(stderr,"I_1 mat: mémoire insuffisante\n");
    exit(-1);
  }
  return mat;
}
/*************************************************************************/
void f_I_1(
		  int *mat,      /*  Pointeur sur le vecteur */
		  int ligne      /*  Nombre d'elements */
		  ){
  free(mat);
  return;
}
/*************************************************************************/
char *C_1(
		     int nligne         /* Nombre d'elements */
		     ){
  char *mat;
  mat=(char*)malloc(nligne*sizeof(char));
  if(mat==NULL){
    fprintf(stderr,"C_1 mat: mémoire insuffisante\n");
    exit(-1);
  }
  return mat;
}
/*************************************************************************/
void f_C_1(
		   char *mat,      /*  Pointeur sur le vecteur */
		   int ligne       /*  Nombre d'elements */
		   ){
  free(mat);
  return;
}
/*************************************************************************/
double **D_2(
			  int nligne,         /* Nombre de lignes */
			  int ncolonne        /* Nombre de colonnes */
			  ){
  double **mat;
  int i;
  mat=(double**)malloc(nligne*sizeof(double*));
  if(mat==NULL){
    fprintf(stderr,"D_2 mat: mémoire insuffisante\n");
    exit(-1);
  }
  for(i=0;i<nligne;i++){
    mat[i]=(double*)malloc(ncolonne*sizeof(double));
    if(mat[i]==NULL){
      fprintf(stderr,"D_2 mat[%i]: mémoire insuffisante\n",i);
      exit(-1);
    }
  }
  return mat;
}
/*************************************************************************/
void f_D_2(
		       double **mat,      /*  Pointeur sur la matrice */
		       int ligne,         /*  Nombre de lignes */
		       int ncolonne       /*  Nombre de colonnes */
		       ){
  int i;  
  for(i=0;i<ligne;i++)
    free(mat[i]);
  free(mat);
  return;
}
/*************************************************************************/
int **I_2(
		    int nligne,         /* Nombre de lignes */
		    int ncolonne        /* Nombre de colonnes */
		    ){
  int **mat;
  int i;
  mat=(int**)malloc(nligne*sizeof(int*));
  if(mat==NULL){
    fprintf(stderr,"I_2 mat: mémoire insuffisante\n");
    exit(-1);
  }
  for(i=0;i<nligne;i++){
    mat[i]=(int*)malloc(ncolonne*sizeof(int));
    if(mat[i]==NULL){
      fprintf(stderr,"I_2 mat[%i]: mémoire insuffisante\n",i);
      exit(-1);
    }
  }
  return mat;
}
/*************************************************************************/
void f_I_2(
		    int **mat,         /*  Pointeur sur la matrice */
		    int ligne,         /*  Nombre de lignes */
		    int ncolonne       /*  Nombre de colonnes */
		    ){
  int i;  
  for(i=0;i<ligne;i++)
    free(mat[i]);
  free(mat);
  return;
}
/*************************************************************************/
char **C_2(
		      int nligne,         /* Nombre de lignes */
		      int ncolonne        /* Nombre de colonnes */
		      ){
  char **mat;
  int i;
  mat=(char**)malloc(nligne*sizeof(char*));
  if(mat==NULL){
    fprintf(stderr,"C_2 mat: mémoire insuffisante\n");
    exit(-1);
  }
  for(i=0;i<nligne;i++){
    mat[i]=(char*)malloc(ncolonne*sizeof(char));
    if(mat[i]==NULL){
      fprintf(stderr,"C_2 mat[%i]: mémoire insuffisante\n",i);
      exit(-1);
    }
  }
  return mat;
}
/*************************************************************************/
void f_C_2(
		     char **mat,        /*  Pointeur sur la matrice */
		     int ligne,         /*  Nombre de lignes */
		     int ncolonne       /*  Nombre de colonnes */
		     ){
  int i;  
  for(i=0;i<ligne;i++)
    free(mat[i]);
  free(mat);
  return;
}
/*************************************************************************/
double ***D_3(
			   int n1,         /* Dimension du premier indice */
			   int n2,         /* Dimension du second indice */
			   int n3          /* Dimension du troisieme indice */
			   )
{
  double ***mat;
  int i,j;
  mat=(double***)malloc(n1*sizeof(double**));
  if(mat==NULL)
    {
      fprintf(stderr,"D_3 mat: mémoire insuffisante\n");
      exit(-1);
    }
  for(i=0;i<n1;i++)
    {
      mat[i]=(double**)malloc(n2*sizeof(double*));
      if(mat[i]==NULL)
	{
	  fprintf(stderr,"D_3 mat[%i]: mémoire insuffisante\n",i);
	  exit(-1);
	}
      for (j=0;j<n2;j++)
	{
	  mat[i][j]=(double *)malloc(n3*sizeof(double));
	    if(mat[i][j]==NULL)
	      {
		fprintf(stderr,"D_3 mat[%i][%i]: mémoire insuffisante\n",i,j);
		exit(-1);
	      }
	}
    }
  return mat;
}
/*************************************************************************/
void f_D_3(
                       double ***mat,    /* Pointeur sur le tenseur */
                       int n1,           /* Dimension du premier indice */
                       int n2,           /* Dimension du second indice */
                       int n3            /* Dimension du troisieme indice */
		       )
{
  int i,j;  
  for(i=0;i<n1;i++)
    {
      for(j=0;j<n2;j++) free(mat[i][j]);
      free(mat[i]);
    }
  free(mat);
  return;
}
/*************************************************************************/
int ***I_3(
			   int n1,         /* Dimension du premier indice */
			   int n2,         /* Dimension du second indice */
			   int n3          /* Dimension du troisieme indice */
			   )
{
  int ***mat;
  int i,j;
  mat=(int***)malloc(n1*sizeof(int**));
  if(mat==NULL)
    {
      fprintf(stderr,"I_3 mat: mémoire insuffisante\n");
      exit(-1);
    }
  for(i=0;i<n1;i++)
    {
      mat[i]=(int**)malloc(n2*sizeof(int*));
      if(mat[i]==NULL)
	{
	  fprintf(stderr,"I_3 mat[%i]: mémoire insuffisante\n",i);
	  exit(-1);
	}
      for (j=0;j<n2;j++)
	{
	  mat[i][j]=(int *)malloc(n3*sizeof(int));
	    if(mat[i][j]==NULL)
	      {
		fprintf(stderr,"I_3 mat[%i][%i]: mémoire insuffisante\n",i,j);
		exit(-1);
	      }
	}
    }
  return mat;
}
/*************************************************************************/
void f_I_3(
                       int ***mat,       /* Pointeur sur le tenseur */
                       int n1,           /* Dimension du premier indice */
                       int n2,           /* Dimension du second indice */
                       int n3            /* Dimension du troisieme indice */
		       )
{
  int i,j;  
  for(i=0;i<n1;i++)
    {
      for(j=0;j<n2;j++) free(mat[i][j]);
      free(mat[i]);
    }
  free(mat);
  return;
}
/*************************************************************************/
char ***C_3(
			   int n1,         /* Dimension du premier indice */
			   int n2,         /* Dimension du second indice */
			   int n3          /* Dimension du troisieme indice */
			   )
{
  char ***mat;
  int i,j;
  mat=(char***)malloc(n1*sizeof(char**));
  if(mat==NULL)
    {
      fprintf(stderr,"C_3 mat: mémoire insuffisante\n");
      exit(-1);
    }
  for(i=0;i<n1;i++)
    {
      mat[i]=(char**)malloc(n2*sizeof(char*));
      if(mat[i]==NULL)
	{
	  fprintf(stderr,"C_3 mat[%i]: mémoire insuffisante\n",i);
	  exit(-1);
	}
      for (j=0;j<n2;j++)
	{
	  mat[i][j]=(char *)malloc(n3*sizeof(char));
	    if(mat[i][j]==NULL)
	      {
		fprintf(stderr,"C_3 mat[%i][%i]: mémoire insuffisante\n",i,j);
		exit(-1);
	      }
	}
    }
  return mat;
}
/*************************************************************************/
void f_C_3(
                       char ***mat,      /* Pointeur sur le tenseur */
                       int n1,           /* Dimension du premier indice */
                       int n2,           /* Dimension du second indice */
                       int n3            /* Dimension du troisieme indice */
		       )
{
  int i,j;  
  for(i=0;i<n1;i++)
    {
      for(j=0;j<n2;j++) free(mat[i][j]);
      free(mat[i]);
    }
  free(mat);
  return;
}
/*************************************************************************/
/* Fournit la valeur de la loi binomiale pour une proba p, un nombre d'epreuves n et un nombre de realisations k */
/* Utilise combi */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
double binomiale(double p,int n,int k)
{ 
  return(combi(n,k)*pow(p,k)*pow(1-p,n-k));
}

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <cmath>
#include <iostream>
#include <complex>
using namespace std; // important de mettre cette ligne avant la suivante
#include "bibli_fonctions.h"
int choleski_complex(complex<double> *a,complex<double> *b,complex<double> *c,complex<double> *x,complex<double> *y,int n)
{ 
  complex<double> *al,*be,nu,zero(0.,0.); int i;
  al=new complex<double>[n]; be=new complex<double>[n];
  if(b[0]==zero){printf("Echec 1 de choleski"); return 1;} 
  al[0]=-c[0]/b[0]; be[0]=y[0]/b[0]; 
  for(i=1; i<n; i++)
    {
      nu=a[i]*al[i-1]+b[i]; if(nu==zero){printf("Echec 2 de choleski"); return 2;}
      al[i]=-c[i]/nu; be[i]=(y[i]-a[i]*be[i-1])/nu;
    }
  x[n-1]=be[n-1];
  for(i=n-2; i>=0; i--) x[i]=al[i]*x[i+1]+be[i];
  return(0);
}
#if 0
#define K 4
int main(void)
{
  int i;
  complex<double> I(0.,1.);
  complex<double> p[K]={0.+I*0.,6.+I*2.,4.+I*8.,3.+I*9.};
  complex<double> q[K]={4.+I*7.,3.+I*7.,6.+I*5.,4.+I*3.};
  complex<double> r[K]={5.+I*8.,4.+I*3.,3.+I*9.,0.+I*0.};
  complex<double> v[K]={1.+I*8.,4.+I*3.,2.+I*6.,3.+I*7.};
  complex<double> u[K];
  choleski_complex(p,q,r,u,v,K);
  //for(i=0; i<K; i++)   cout << "real=" << real(u[i]) << " imag=" << imag(u[i]) << endl; 
  for(i=0; i<K; i++) cout << i << " " << u[i] << endl;
  // Verification :
  cout << q[0]*u[0]+r[0]*u[1] << v[0] << endl;
  for(i=1; i<K-1; i++) cout << p[i]*u[i-1]+q[i]*u[i]+r[i]*u[i+1] << v[i] << endl;
  cout << p[K-1]*u[K-2]+q[K-1]*u[K-1] << v[K-1] << endl; 
  return(0);
}
#endif
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <cmath>
#include <iostream>
#include <complex>
#include <vector>
using namespace std; // important de mettre cette ligne avant la suivante
#include "bibli_fonctions.h"
#define vcd vector<complex<double> >
int choleski_complex_vector(vcd a,vcd b,vcd c,vcd &x,vcd y,int n)
{ 
  complex<double> nu,zero(0.,0.); int i;
  vcd al(n); vcd be(n);
  if(b[0]==zero){printf("Echec 1 de choleski"); return 1;} 
  al[0]=-c[0]/b[0]; be[0]=y[0]/b[0]; 
  for(i=1; i<n; i++)
    {
      nu=a[i]*al[i-1]+b[i]; if(nu==zero){printf("Echec 2 de choleski"); return 2;}
      al[i]=-c[i]/nu; be[i]=(y[i]-a[i]*be[i-1])/nu; 
    }
  x[n-1]=be[n-1];
  for(i=n-2; i>=0; i--) x[i]=al[i]*x[i+1]+be[i];
  return(0);
  }
#if 0
#define K 4
int main(void)
{
  int i;
  complex<double> I(0.,1.);
  complex<double> p[K]={0.+I*0.,6.+I*2.,4.+I*8.,3.+I*9.};
  complex<double> q[K]={4.+I*7.,3.+I*7.,6.+I*5.,4.+I*3.};
  complex<double> r[K]={5.+I*8.,4.+I*3.,3.+I*9.,0.+I*0.};
  complex<double> v[K]={1.+I*8.,4.+I*3.,2.+I*6.,3.+I*7.};
  vcd vp(p,p+K); vcd vq(q,q+K); vcd vr(r,r+K); vcd vv(v,v+K); 
  vcd vu(K);
  choleski_complex_vector(vp,vq,vr,vu,vv,K);
  for(i=0; i<K; i++) cout << vu[i] << endl;
  // Verification :
  cout << vq[0]*vu[0]+vr[0]*vu[1] << vv[0] << endl;
  for(i=1; i<K-1; i++) cout << vp[i]*vu[i-1]+vq[i]*vu[i]+vr[i]*vu[i+1] << vv[i] << endl;
  cout << vp[K-1]*vu[K-2]+vq[K-1]*vu[K-1] << vv[K-1] << endl; 
  return(0);
}
#endif
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
int choleski(double *a,double *b,double *c,double *x,double *y,int n)
{ 
  double *al,*be,nu; int i;
  al=(double *)malloc(n*sizeof(double)); be=(double *)malloc(n*sizeof(double));
  if(b[0]==0.){printf("Echec 1 de choleski"); return 1;} 
  al[0]=-c[0]/b[0]; be[0]=y[0]/b[0]; 
  for(i=1; i<n; i++)
    {
      nu=a[i]*al[i-1]+b[i]; if(nu==0.){printf("Echec 2 de choleski"); return 2;}
      al[i]=-c[i]/nu; be[i]=(y[i]-a[i]*be[i-1])/nu;
    }
  x[n-1]=be[n-1];
  for(i=n-2; i>=0; i--) x[i]=al[i]*x[i+1]+be[i];
  return 0;
}
/* #define K 4
int main(void)
{
  int i;
  double p[K]={0.,1.,6.,2.};
  double q[K]={2.,1.,-2.,-3.};
  double r[K]={1.,-3.,1.,0.};
  double v[K]={7.,-10.,7.,13.};
  double u[K];
  choleski(p,q,r,u,v,K);
  for(i=0; i<K; i++) printf("%lg ",u[i]);
  printf("\n");
} */
/* Calcul de c(n,k) en reels, pas d'avertissement en cas de depassement */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
double combi(int n,int k)
{
  int j; double r;
  if(k>n-k) k=n-k;
  for(r=1,j=0; j<=k-1; j++) r=r*(n-j)/(k-j);
  return (r);
}
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
#define D_t double
#define Int_t int
/* ***************************************************************************** */
/* Resolution d'une equation du second degre, la valeur de la fonction est : */
/*   3 si a=b=c=0 (tout x est racine) */
/*   0 si a=b=0 et c!=0 ou si a!=0 et delta<0 (pas de racines) */
/*   1 si a=0 et b!=0 ou si a!=0 et delta=0 (une racine unique renvoyee dans *xp et *xs) */
/*   2 si a!=0 et delta>0 (deux racines renvoyees dans xp et xs) */
Int_t r2(D_t a, D_t b, D_t c, D_t *xp, D_t *xs)
{
  D_t delta,rd ;
  /* fprintf(fich,"a=%lg b=%lg c=%lg\n",a,b,c); */
  if(a==0.) 
    {
      if(b==0.) 
	{
	  if(c==0.) return 3 ;
	  else return 0 ;
	} 
      else 
	{
	  *xp=-c/b ; *xs=*xp ; return 1 ;
	}
    } 
  else
    {
      delta=b*b-4.*a*c ;
      /* fprintf(fich,"delta=%lg\n",delta); */
      if(delta<0.) return 0 ;
      if(delta==0.) {*xp=-b/2./a ; *xs=*xp ; return 1 ;}
      else {rd=sqrt(delta) ; *xp=(-b-rd)/2./a ; *xs=(-b+rd)/2./a ; return 2 ;}
    } 
}
/* ***************************************************************************** */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
static double rac(double x)
{
  double y,tt=1./3;
  y=pow(fabs(x),tt);
  if(x<0.) y=-y;
  return y;
}
int eq_3d(double a,double b,double c,double d,double x[3])
{
  double r,s,t,p,q,u,v,phi,rr,rrr,pi,rs3,dps3;
  pi=acos(-1.); dps3=2*pi/3;
  if(a==0.){printf("Equation de degre < 3"); return -1;}
  r=b/a; s=c/a; t=d/a; p=s-r*r/3; q=2*r*r*r/27-r*s/3+t; rs3=r/3;
  u=q*q/4+p*p*p/27;
  if(u>0) {x[0]=rac(-q/2+sqrt(u))+rac(-q/2-sqrt(u))-rs3; return 1;}
  if(u==0.) {v=2*rac(-q/2); x[0]=v-rs3; x[1]=x[2]=-v/2-rs3; return 2;}
  rr=sqrt(-p*p*p/27); rrr=2*sqrt(-p/3); phi=acos(-q/2/rr);
  x[0]=rrr*cos(phi/3)-rs3; x[1]=rrr*cos(phi/3+dps3)-rs3; x[2]=rrr*cos(phi/3-dps3)-rs3; 
  return 3;
}

/* Calcul d'une integrale par la méthode des rectangles au milieu.
   Il faut fournir les bornes inf et sup, la fonction, le nombre de rectangles */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
double integ(double a,double b,double (*f)(double),int n)
{
  double h,s; int i;
  h=(b-a)/n;
  for(s=0.,i=1; i<=n; i++) s=s+(*f)(a+(i-0.5)*h);
  return (h*s);
}




#include <stdlib.h>
#include <stdio.h> 
#include <math.h>
#include <bibli_fonctions.h>
double gauss(double t)
{
  double c=1./sqrt(2.*acos(-1.));
  return (c*exp(-0.5*t*t));
}
int main(void)
{
  double x,ee=1.e-10; int np=100;
  printf("x=? ");scanf("%lg",&x);
  printf("Integrale de -infini a %lg=%15.12lg\n",x,0.5+integ(0.,x,gauss,np)); /* juste pour comparer */ 
  printf("Integrale de -infini a %lg=%15.12lg\n",x,0.5+integ_preci(0.,x,gauss,np,ee)); 
  return (0);
}
/* Calcul d'une integrale par la méthode des rectangles au milieu.
   Il faut fournir les bornes inf et sup, la fonction, le nombre de rectangles 
   et une tolerance eps. 
   Le nombre de rectangles fourni n'est qu'un point de depart.
   Il est augmente jusqu'à ce que la variation relative du resultat soit inferieure 
   en valeur absolue a eps.  
   On fait appel a la fonction integ */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
double integ_preci(double p,double q,double (*f)(double),int k,double eps)
{
  double i,ip,d;
  ip=integ(p,q,(*f),k);
  do
    {
      k=2*k; 
      i=integ(p,q,(*f),k);
      d=fabs((i-ip)/ip);
      ip=i;
    }
  while(d>eps);
  printf("Nombre final de rectangles :%d\n",k);
  return (i);
}



#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
#define PM 4
void rk4(void(*sd)(double *,double,double *,int),double q[],double t,double dt,int n)
{
  /* Declarations et initialisations */
  int i,k,p;
  double *y[PM+1],*z[PM];
  static const double a[PM][PM]={{1./2,0,0,0},{0,1./2,0,0},{0,0,1,0},{1./6,1./3,1./3,1./6}};
  static const double b[PM]={0,1./2,1./2,1};
  /* Allocations */
  for(i=0; i<PM+1; i++) y[i]=(double *)malloc(n*sizeof(double));
  for(i=0; i<PM; i++) z[i]=(double *)malloc(n*sizeof(double));
  /* Calcul */
  for(i=0; i<n; i++) y[0][i]=q[i];
  for(p=1; p<=PM; p++)
    {
      sd(y[p-1],t+b[p-1]*dt,z[p-1],n);
      for(i=0; i<n; i++) y[p][i]=q[i];
      for(k=0; k<p; k++) {for(i=0; i<n; i++) y[p][i]=y[p][i]+dt*a[p-1][k]*z[k][i];}
    }   
  for(i=0; i<n; i++) q[i]=y[PM][i];
  /* Desallocations */
  for(i=0; i<PM+1; i++) {free(y[i]); y[i]=NULL;}
  for(i=0; i<PM; i++) {free(z[i]); z[i]=NULL;}
}
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "bibli_fonctions.h"
void tri_d(double n[],int nmax)
{
  double nn;
  int i,j;
  for(j=1; j<nmax; j++)
    {
      nn=n[j];
      for(i=j-1; i>=0; i--)
	{
	  if(n[i]<=nn) goto vega;
	  n[i+1]=n[i];
	}
      i=-1;
      vega : n[i+1]=nn;
    }
}
  
